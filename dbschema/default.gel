using extension pgvector;
using extension pgcrypto;
using extension auth;
using extension ai;
using future simple_scoping;

module default {
  # Global variable for authenticated user (used by access policies)
  # Automatically resolves from EdgeDB auth extension
  global current_user := (
    assert_single((
      select people::Person
      filter .identity = global ext::auth::ClientTokenIdentity
    ))
  );

  scalar type Stage extending enum<Draft, Active, Closed, Extended, Canceled>;
  scalar type Activation extending enum<Active, Inactive>;

  abstract type Timestamp {
    required created: datetime {
      rewrite insert using (datetime_of_statement())
    };
    required updated: datetime {
      rewrite update using (datetime_of_statement())
    };
  }
}

module companies {
  type Company extending default::Timestamp {
    required name: str;
    tagline: str;
    mission: str;
    description: str;
    logo_url: str;
    founded: datetime;
    required public: bool {
      default := false
    };
    status: default::Activation;
    multi industries: taxonomy::Industry;
    headquarters: str;
    multi operations: str;
    team_size: int32;
    technical_staff: int32;
    website: str;
    
    # links
    multi tags: taxonomy::Tag;
    multi funding := .<company[is funding::Capital];
    multi ownership: ownership::Table;
    multi goals: taxonomy::Goal;
    multi articles: content::Article;
    multi recognitions: content::Recognition;
    multi people: people::Person;
    
    # Computed properties
    multi investments := .<company[is funding::Investment];
    multi investors := .<company[is funding::Investment].investor;
    
    # NO ACCESS POLICIES - gRPC interceptors handle all access control
    # This makes the database completely portable and moves permission logic to application layer
  }

  type KeyMetrics extending default::Timestamp {
    metric_name: str;
    metric_value: str;
    growth_rate: float32;
    runway: int16;
    
    # link
    required link company: Company;
    
    # NO ACCESS POLICIES - gRPC interceptors handle all access control
    # This makes the database completely portable and moves permission logic to application layer
  }
}

module content {
  type Article extending default::Timestamp {
    date: datetime;
    title: str;
    content: str;
    source_type: str;  # Twitter, PressRelease, etc.
    url: str;
    
    # RBAC integration
    author: people::Person;
    published: bool { default := false }
    
    # link
    required link company: companies::Company;
    
  }
  
  type Recognition extending default::Timestamp {
    title: str;
    year: int16;
    organization: str;
    description: str;
    recognition_type: str;  # Award, Partnership, etc.
    
    # RBAC integration
    added_by: people::Person;
    verified: bool { default := false }
    
    # link
    required link company: companies::Company;
    
  }
}

module access {
    scalar type Permission extending enum<Admin, Basic, Investor, Investments, Company, Profile, Documents, Financials, Personnel, View, Download, Upload, Deals, Impact, Messages, Connections>;
    type Policy extending default::Timestamp {
        property description: std::str;
        required property name: std::str {
            constraint std::exclusive
        };
        multi property permissions: access::Permission;
    }
}

module taxonomy {
    type Tag extending default::Timestamp {
        property color: std::str;
        property description: std::str;
        required property name: std::str;
    }
    
    type Industry extending default::Timestamp {
      required property name: std::str;
      property description: std::str;
      required property sic: std::str;
      property sic_division: std::str;
      property sic_group: std::str;
      property naics: std::str;
      property primary: bool { default := true };
    }    
    
    type Goal extending default::Timestamp {
        required property name: std::str;
        property description: std::str;
    };
}

module funding {
  scalar type Round extending enum<
    Pre,
    Seed,
    A,
    B,
    C,
    D,
    E,
    F,
    G,
    H,
    Growth,
    Mezzanine,
    IPO,
    Secondary,
    Debt,
    Strategic,
    Acquisition,
    Convertible,
    SAFE,
    Other
  >;

  type Capital extending default::Timestamp {
    required company: companies::Company;
    round: Round;
    target: decimal;
    raised: decimal;
    opens: datetime;
    closes: datetime;
    minimum: decimal;
    pre: decimal;
    post: decimal;
    multi leads: people::Person | companies::Company;
    stage: default::Stage;
    
    multi outcomes: str;
    multi uses: Allocation;
    multi goals: taxonomy::Goal;
    
    multi investments := .<capital[is Investment];
  }
  
  type Allocation extending default::Timestamp {
    purpose: str;
    required percent: int16;
    required link capital: Capital;
  }

  type Investment extending default::Timestamp {
    required investor: people::Person | companies::Company;
    required company: companies::Company;
    required capital: Capital;
    required amount: decimal;
    shares: int64;
    price: decimal;
    exit: bool {
      default := false
    };
    exits: datetime;
    return: decimal;
  }
}

module ownership {
   scalar type Party extending enum<Founder, Angel, Venture, Private, Corporate, Impact, Stock, Employee, Government, Other>;
   
   type Stake extending default::Timestamp {
       link table: ownership::Table;
       required link holder: (companies::Company | people::Person);
       property color: std::str;
       property class: Party;
       property percent: std::float32;
       property shares: std::int64;
   };
   
   type Table extending default::Timestamp {
       required link company: companies::Company;
       link funding: funding::Capital;
       multi link stakes := (.<table[is ownership::Stake]);
       property date: std::datetime;
       property total: std::int64;
       property notes: std::str;
   }
}

module people {
    scalar type Role extending enum<Founder, Ceo, Cto, Cfo, Coo, Investor, Board, Advisor, Employee, Other>;
    
    type Criteria extending default::Timestamp {
        required link person: Person;
        multi link preferred_goals: taxonomy::Goal;
        property min_investment: float64;
        property max_investment: float64;
        property preferred_industries: array<str>;
        property investment_stage: str;
        
        access policy owner
          allow all
          using (exists global default::current_user and global default::current_user.id ?= .person.id) {
            errmessage := "Only the person can modify their investment criteria";
          };
    }
    
    type Person extending default::Timestamp {
        multi link policies: access::Policy;
        link employer: companies::Company;
        link identity: ext::auth::Identity;
        multi link portfolio: funding::Investment;
        link criteria: Criteria;
        required property email: std::str {
            constraint std::exclusive
        };
        required property firstname: std::str;
        property fullname := (((.firstname ++ ' ') ++ .lastname));
        property is_key_executive: std::bool {
            default := false
        };
        property job_title: str;
        property joined_date: datetime;
        required property lastname: str;
        property linkedin_url: str;
        property photo_url: str;
        property role: Role;
        property profile: str;
        
        access policy owner
          allow all
          using (exists global default::current_user and global default::current_user.id ?= .id) {
            errmessage := "Only the person can modify their own profile";
          };
    }
}

